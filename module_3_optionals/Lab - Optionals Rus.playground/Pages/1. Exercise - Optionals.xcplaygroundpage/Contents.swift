/*:
 ## Упражнение - опциональные значения
 
  >Во время выполнения упражнений данного плейграунда, вы будете выводить в консоль опциональные значения.  Компилятор Swift выдаст предупреждение: «Expression implicitly coerced from `Int?` to Any».  Для целей выполнения заданий, можете данные предупреждения игнорировать.

 Ваше приложение запрашивает пользователя его возраст.  Введённые пользователем данные передаются вам в виде текста, `String`.  Однако, вам нужно сохранить значение в виде целого числа `Int`.  Пользователь может сделать ошибку и ввести неверные данные.
 
 Объявите константу `userInputAge` типа `String` и присвойте ей значение "34e" для моделирования опечатки.  Затем определите константу `userAge` типа `Int` и используйте конструктор `Int` для преобразования `userInputAge`.  Какую ошибку вы получаете?
*/

// let userInputAge: String = "34e"
let userInputAge: String = "34"
//let userAge: Int? = Int(userInputAge)

/*:
 Теперь поменяйте тип `userAge` на `Int?`, и напечатайте значение `userAge`.  Почему значение `userAge` равно `nil`?  Ответьте в комментарии или внутри команды print.
 */

print("После того как тип константы userAge изменили на опциональный, появилась возможность записать не только Int значение но и nil в эту константу")


/*:
 Теперь исправьте опечатку в значении `userInputAge`.  Что-нибудь в результатах вывода кажется вам неуместным?
 
 Напечатайте `userAge` снова, но теперь разверните `userAge` с помощью оператора «!».
 */

//print(userAge!)

/*:
 Используйте привязку опционалов для извлечения `userAge`.  Если `userAge` содержит значение, выведите его в консоль.
 */

if let userAge = Int(userInputAge) {
    print(userAge)
} else {
    print("String to Int error")
}


//: страница 1 из 6  |  [Далее: упражнение для приложения - узнаём пульс](@next)
