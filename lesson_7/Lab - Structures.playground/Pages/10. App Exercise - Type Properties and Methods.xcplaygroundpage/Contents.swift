/*:
 ## Упражнение для приложения — свойства и методы типов
 
 >Эти упражнения закрепляют понимание Swift в контексте фитнес-приложения.
 
 В одном из предыдущих упражнений вы добавили вычислимое свойство для среднего количество времени на милю. Теперь вы планируете создать своего рода калькулятор, который поможет пользователю вычислить заранее, сколько времени им нужно затрачивать на милю, чтобы уложиться в заданное время. В этом случае может быть полезно иметь метод типа в структуре `RunningWorkout`, доступ к которому можно получить без создания экземпляра типа  `RunningWorkout`.
 
 Добавьте к `RunningWorkout` метод типа с именем `mileTimeFor(distance:time:)`, где `distance` и `time` имеют тип `Double`. Этот метод должен возвращать значение типа `Double`. Тело метода должно вычислять среднее время на милю, требуемое для преодоления заданной дистанции в заданное время. Предположите, что дистанция задаётся в метрах и одна миля — это 1600 метров.
 
 Вызовите метод снаружи структуры и выведите результат в консоль, чтобы удостовериться, что всё вычисляется корректно.
 */
struct RunningWorkout {     // Беговая разминка
    var distance: Double    // Пройденное расстояние
    var time: Double        // Потраченное время
    var elevation: Double   // Изменение высоты над уровнем моря
    static let meterInFeet = 3.28084
    static let mileInMeters = 1600.0
    
    static func mileTimeFor(distance:Double, time:Double) -> Double {
        return distance / time
    }
}

print(RunningWorkout.mileTimeFor(distance: 1600, time: 30))
/*:
 Может быть также полезно создать новые свойства типа в структуре `RunningWorkout`, хранящие коэффициенты для перевода единиц измерения (т. е. метров в мили, футов в метры и т. д.). Вернитесь назад и добавьте свойство типа с именем `meterInFeet` и присвойте ему значение 3.28084. Затем добавьте свойство типа с именем `mileInMeters` и устаните его равным 1600.0. Выведите оба значения ниже.
 */

//: [Ранее](@previous)  |  страница 10 из 10
