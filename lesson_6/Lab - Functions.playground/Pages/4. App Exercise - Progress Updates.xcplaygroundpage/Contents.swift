/*:
 ## Упражнение для приложения — информирование об успехах
 
 >Эти упражнения закрепляют понимание Swift в контексте фитнес-приложения.
 
 Довольно часто вам нужно передавать в функцию вводную информацию.  К примеру, функция информирования об успехах, которую вы написали в упражнении «Работающее приложение», может быть расположена в такой области вашего проекта, что она не будет иметь доступа к значениям `steps` и `goal`.  В этом случае при вызове функции вам нужно сообщить ей количество шагов, которое было пройдено, и цель на день, чтобы она могла вывести релевантные сообщения об успехах.
 
 Перепишите функцию `progressUpdate` таким образом, чтобы она принимала два параметра типа `Int`, называющиеся `steps` и `goal`.  Как и ранее, функция должна вывести «Хорошее начало!» в случае, если `steps` меньше 10% от `goal`, «Вы на пути к половине цели!», если `steps` меньше, чем половина `goal`, «Вы уже выполнили больше половины своей цели!», если `steps` меньше, чем 90% от `goal`, «Вы почти достигли цели!», если `steps` меньше `goal`, и «Вы выполнили вашу цель!» в противном случае.  Вызовите функцию и зафиксируйте результат.
 
 Вызовите функцию несколько раз, передавая ей различные значения `steps` и `goal`.  Зафиксируйте результаты и убедитесь, что она выдаёт то, что вы ожидаете, для каждой из пары параметров, переданных в функцию.
 */
func progressUpdate(steps: Int, goal: Int) -> Void {
    let result = Double(steps) / Double(goal) * 100
    
    switch result {
    case 0...10:
        print("Хорошее начало!")
        break
    case 10...50:
        print("Вы на пути к половине цели!")
        break
    case 50...90:
        print("Вы уже выполнили больше половины своей цели!")
        break
    case 90...99:
        print("Вы почти достигли цели!")
        break
    default:
        print("Вы выполнили вашу цель")
    }
    
}

progressUpdate(steps: 200,goal: 10000)
progressUpdate(steps: 3000,goal: 5000)
progressUpdate(steps: 6000,goal: 20000)
progressUpdate(steps: 9200, goal: 10000)
progressUpdate(steps: 11000, goal: 12000)

/*:
 Ваше фитнесс-приложение поможет бегунам не выбиться из графика для достижения их целей.   Напишите функцию `pacing`, принимающую четыре параметра типа `Double`, называющиеся `currentDistance` (текущее расстояние), `totalDistance` (общее расстояние), `currentTime` (текущее время) и `goalTime` (целевое время).  Функция должна вычислить, не выбивается ли бегун из графика, чтобы достичь или побить цель `goalTime`.  Если не выбивается, напечатайте «Держите темп!», в противном случае напечатайте «Вам нужно ускорить темп, чтобы успеть!»
 */
func pacing(currentDistance: Double, goalDistance: Double, currentTime: Double, goalTime: Double) -> Void {
    let goalSpeed = goalDistance / goalTime
    let currentSpeed = currentDistance / currentTime
    if currentSpeed >= goalSpeed {
        print("Держите темп!")
    } else {
        print("Вам нужно ускорить темп, чтобы успеть!")
    }
}
pacing(currentDistance: 1000, goalDistance: 10000, currentTime: 350, goalTime: 3000)
pacing(currentDistance: 1000, goalDistance: 3000, currentTime: 20, goalTime: 800)

//: [Ранее](@previous)  |  страница 4 из 6  |  [Далее: Упражнение — Возвращение результатов](@next)
